# Generated by Django 5.2.4 on 2025-07-09 11:01

import core.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('customer_management', '0003_customer_last_segment_review_and_more'),
        ('document_verification', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveIndex(
            model_name='biometricverification',
            name='document_ve_custome_d601d4_idx',
        ),
        migrations.RemoveIndex(
            model_name='documentextraction',
            name='document_ve_documen_49c312_idx',
        ),
        migrations.RemoveIndex(
            model_name='documenttemplate',
            name='document_ve_documen_daa01c_idx',
        ),
        migrations.RemoveIndex(
            model_name='documenttemplate',
            name='document_ve_is_acti_830f1e_idx',
        ),
        migrations.RemoveIndex(
            model_name='liveverificationsession',
            name='document_ve_session_39f3cd_idx',
        ),
        migrations.RemoveIndex(
            model_name='verificationresult',
            name='document_ve_is_veri_6635f4_idx',
        ),
        migrations.RemoveIndex(
            model_name='verificationresult',
            name='document_ve_review__f31ed2_idx',
        ),
        migrations.RemoveIndex(
            model_name='verificationsession',
            name='document_ve_custome_bd3929_idx',
        ),
        migrations.RemoveIndex(
            model_name='verificationsession',
            name='document_ve_status_bb0cff_idx',
        ),
        migrations.AlterUniqueTogether(
            name='document',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='documentverification',
            name='action_at',
        ),
        migrations.RemoveField(
            model_name='documentverification',
            name='action_by',
        ),
        migrations.RemoveField(
            model_name='documentverification',
            name='action_type',
        ),
        migrations.AddField(
            model_name='document',
            name='issuing_country',
            field=models.CharField(default=django.utils.timezone.now, help_text='Country that issued the document', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='document',
            name='verification_confidence',
            field=models.FloatField(default=0.0, help_text='Verification confidence score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='document_type',
            field=models.CharField(db_index=True, default=django.utils.timezone.now, help_text='Type of document', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documentverification',
            name='encryption_key_id',
            field=models.CharField(default=django.utils.timezone.now, help_text='ID of the key used for file encryption', max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documentverification',
            name='file_path',
            field=models.FileField(default=1, upload_to='documents/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions={'csv', 'doc', 'docx', 'jpeg', 'jpg', 'pdf', 'png', 'tiff', 'xls', 'xlsx'}), core.validators.validate_file_size]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documentverification',
            name='is_verified',
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='mime_type',
            field=models.CharField(default=django.utils.timezone.now, max_length=100),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documentverification',
            name='uploaded_at',
            field=models.DateTimeField(auto_now_add=True, db_index=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='documentverification',
            name='verification_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='verification_method',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='documentverification',
            name='verification_result',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='liveverificationsession',
            name='max_attempts',
            field=models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)]),
        ),
        migrations.AddField(
            model_name='verificationresult',
            name='overall_confidence',
            field=models.FloatField(default=0.0, help_text='Overall verification confidence score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='verificationresult',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_verifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='biometricverification',
            name='capture_data',
            field=models.FileField(help_text='Captured biometric data', upload_to='biometric_captures/%Y/%m/', validators=[core.validators.validate_file_size]),
        ),
        migrations.AlterField(
            model_name='biometricverification',
            name='liveness_check',
            field=models.JSONField(default=dict, help_text='Liveness detection results'),
        ),
        migrations.AlterField(
            model_name='biometricverification',
            name='match_score',
            field=models.FloatField(help_text='Biometric match confidence score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='biometricverification',
            name='reference_image',
            field=models.FileField(help_text='Reference image/data for comparison', upload_to='biometric_references/%Y/%m/', validators=[core.validators.validate_file_size]),
        ),
        migrations.AlterField(
            model_name='biometricverification',
            name='verification_result',
            field=models.JSONField(default=dict, help_text='Detailed verification results'),
        ),
        migrations.AlterField(
            model_name='document',
            name='document_hash',
            field=models.CharField(help_text='SHA-256 hash of document content', max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='document',
            name='document_type',
            field=models.CharField(choices=[('EMIRATES_ID', 'Emirates ID'), ('PASSPORT', 'Passport'), ('TRADE_LICENSE', 'Trade License'), ('VISA', 'Visa'), ('INCORPORATION_CERTIFICATE', 'Certificate of Incorporation'), ('MEMORANDUM_OF_ASSOCIATION', 'Memorandum of Association'), ('BOARD_RESOLUTION', 'Board Resolution'), ('POWER_OF_ATTORNEY', 'Power of Attorney'), ('OTHER', 'Other')], help_text='Type of document (passport, ID card, etc.)', max_length=50),
        ),
        migrations.AlterField(
            model_name='document',
            name='ocr_data',
            field=models.JSONField(default=dict, help_text='Extracted data from OCR processing'),
        ),
        migrations.AlterField(
            model_name='document',
            name='verification_method',
            field=models.CharField(choices=[('AUTOMATED', 'Automated'), ('MANUAL', 'Manual'), ('THIRD_PARTY', 'Third Party'), ('BIOMETRIC', 'Biometric'), ('NFC', 'NFC Chip'), ('OCR', 'OCR'), ('BARCODE', 'Barcode')], max_length=50),
        ),
        migrations.AlterField(
            model_name='document',
            name='verification_status',
            field=models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20),
        ),
        migrations.AlterField(
            model_name='document',
            name='verification_timestamp',
            field=models.DateTimeField(auto_now=True, help_text='When the document was last verified'),
        ),
        migrations.AlterField(
            model_name='documentextraction',
            name='confidence_scores',
            field=models.JSONField(default=dict, help_text='Confidence scores for extracted fields'),
        ),
        migrations.AlterField(
            model_name='documentextraction',
            name='extracted_data',
            field=models.JSONField(default=dict, help_text='Extracted information in structured format'),
        ),
        migrations.AlterField(
            model_name='documentextraction',
            name='extraction_type',
            field=models.CharField(choices=[('TEXT_OCR', 'Text OCR'), ('FACE_DETECTION', 'Face Detection'), ('MRZ_READING', 'MRZ Reading'), ('BARCODE_READING', 'Barcode Reading'), ('TABLE_EXTRACTION', 'Table Extraction'), ('FIELD_EXTRACTION', 'Field Extraction')], max_length=50),
        ),
        migrations.AlterField(
            model_name='documenttemplate',
            name='extraction_settings',
            field=models.JSONField(default=dict, help_text='OCR and extraction configuration'),
        ),
        migrations.AlterField(
            model_name='documenttemplate',
            name='preprocessing_steps',
            field=models.JSONField(default=list, help_text='Image preprocessing steps'),
        ),
        migrations.AlterField(
            model_name='documenttemplate',
            name='sample_images',
            field=models.JSONField(default=list, help_text='Reference to sample document images'),
        ),
        migrations.AlterField(
            model_name='documenttemplate',
            name='template_regions',
            field=models.JSONField(default=dict, help_text='Defined regions for data extraction'),
        ),
        migrations.AlterField(
            model_name='documenttemplate',
            name='validation_rules',
            field=models.JSONField(default=dict, help_text='Rules for validating extracted data'),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='barcode_data',
            field=models.JSONField(default=dict, help_text='Data extracted from document barcode'),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='barcode_type',
            field=models.CharField(blank=True, choices=[('QR', 'QR Code'), ('PDF417', 'PDF417'), ('DATAMATRIX', 'Data Matrix'), ('CODE128', 'Code 128'), ('OTHER', 'Other')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='face_image',
            field=models.ImageField(blank=True, null=True, upload_to='face_images/%Y/%m/', validators=[core.validators.validate_file_size]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='facial_match_score',
            field=models.FloatField(blank=True, help_text='Face matching confidence score', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='file_hash',
            field=models.CharField(help_text='SHA-256 hash of file content', max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='file_size',
            field=models.BigIntegerField(help_text='File size in bytes', validators=[core.validators.validate_file_size]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='liveness_score',
            field=models.FloatField(blank=True, help_text='Liveness detection confidence score', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='liveness_video',
            field=models.FileField(blank=True, null=True, upload_to='liveness_videos/%Y/%m/', validators=[core.validators.validate_file_size]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='nfc_data',
            field=models.JSONField(default=dict, help_text='Data extracted from NFC chip'),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='ocr_confidence',
            field=models.FloatField(default=0.0, help_text='OCR extraction confidence score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='documentverification',
            name='ocr_data',
            field=models.JSONField(default=dict, help_text='Extracted text and field data from document'),
        ),
        migrations.AlterField(
            model_name='liveverificationsession',
            name='session_data',
            field=models.JSONField(default=dict, help_text='Session-specific data and parameters'),
        ),
        migrations.AlterField(
            model_name='liveverificationsession',
            name='verification_attempts',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='verificationresult',
            name='document_verification',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification_result_record', to='document_verification.documentverification'),
        ),
        migrations.AlterField(
            model_name='verificationresult',
            name='risk_flags',
            field=models.JSONField(default=list, help_text='Potential risk flags identified'),
        ),
        migrations.AlterField(
            model_name='verificationresult',
            name='verification_details',
            field=models.JSONField(default=dict, help_text='Detailed verification results'),
        ),
        migrations.AlterField(
            model_name='verificationresult',
            name='verification_method',
            field=models.CharField(choices=[('OCR', 'OCR Verification'), ('FACIAL', 'Facial Verification'), ('NFC', 'NFC Chip Verification'), ('BARCODE', 'Barcode Verification'), ('MANUAL', 'Manual Verification'), ('COMBINED', 'Combined Methods')], max_length=50),
        ),
        migrations.AlterField(
            model_name='verificationsession',
            name='session_data',
            field=models.JSONField(default=dict, help_text='Session configuration and progress data'),
        ),
        migrations.AlterUniqueTogether(
            name='document',
            unique_together={('document_type', 'document_number', 'issuing_country')},
        ),
        migrations.AddIndex(
            model_name='biometricverification',
            index=models.Index(fields=['verification_type'], name='document_ve_verific_309639_idx'),
        ),
        migrations.AddIndex(
            model_name='biometricverification',
            index=models.Index(fields=['match_score'], name='document_ve_match_s_9f9980_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['issuing_country'], name='document_ve_issuing_a83e39_idx'),
        ),
        migrations.AddIndex(
            model_name='documentextraction',
            index=models.Index(fields=['extraction_type'], name='document_ve_extract_f3f46f_idx'),
        ),
        migrations.AddIndex(
            model_name='documentextraction',
            index=models.Index(fields=['extraction_method'], name='document_ve_extract_d43d65_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttemplate',
            index=models.Index(fields=['document_type', 'is_active'], name='document_ve_documen_40785f_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttemplate',
            index=models.Index(fields=['issuing_country'], name='document_ve_issuing_306832_idx'),
        ),
        migrations.AddIndex(
            model_name='liveverificationsession',
            index=models.Index(fields=['session_status'], name='document_ve_session_1f35f8_idx'),
        ),
        migrations.AddIndex(
            model_name='liveverificationsession',
            index=models.Index(fields=['expiry_time'], name='document_ve_expiry__1dafe6_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationresult',
            index=models.Index(fields=['is_verified'], name='document_ve_is_veri_8b94f0_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationresult',
            index=models.Index(fields=['overall_confidence'], name='document_ve_overall_716e70_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationsession',
            index=models.Index(fields=['session_type', 'status'], name='document_ve_session_a52271_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationsession',
            index=models.Index(fields=['expiry_time'], name='document_ve_expiry__9252fe_idx'),
        ),
    ]
