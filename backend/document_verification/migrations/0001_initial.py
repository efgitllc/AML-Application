# Generated by Django 5.2.4 on 2025-07-07 10:40

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer_management', '0003_customer_last_segment_review_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BiometricVerification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('verification_type', models.CharField(choices=[('FACIAL', 'Facial Recognition'), ('LIVENESS', 'Liveness Detection'), ('FINGERPRINT', 'Fingerprint'), ('VOICE', 'Voice Recognition'), ('COMBINED', 'Combined Biometrics')], max_length=50)),
                ('reference_image', models.FileField(help_text='Reference image/data for comparison', upload_to='biometric_references/%Y/%m/')),
                ('capture_data', models.FileField(help_text='Captured biometric data', upload_to='biometric_captures/%Y/%m/')),
                ('liveness_check', models.JSONField(blank=True, help_text='Liveness detection results', null=True)),
                ('match_score', models.FloatField(help_text='Biometric match confidence score')),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('VERIFIED', 'Verified'), ('FAILED', 'Failed'), ('NEEDS_REVIEW', 'Needs Review')], default='PENDING', max_length=50)),
                ('verification_result', models.JSONField(help_text='Detailed verification results')),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_verifications', to='customer_management.customer')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biometric_verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'biometric verification',
                'verbose_name_plural': 'biometric verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('document_type', models.CharField(help_text='Type of document (passport, ID card, etc.)', max_length=50)),
                ('document_number', models.CharField(help_text='Unique document identifier', max_length=100)),
                ('issuing_authority', models.CharField(help_text='Authority that issued the document', max_length=100)),
                ('issue_date', models.DateField(help_text='Date when document was issued')),
                ('expiry_date', models.DateField(help_text='Document expiration date')),
                ('document_hash', models.CharField(help_text='SHA-256 hash of document content', max_length=64)),
                ('ocr_data', models.JSONField(help_text='Extracted data from OCR processing')),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('verification_method', models.CharField(choices=[('AUTOMATED', 'Automated'), ('MANUAL', 'Manual'), ('THIRD_PARTY', 'Third Party'), ('BIOMETRIC', 'Biometric')], max_length=50)),
                ('verification_timestamp', models.DateTimeField(help_text='When the document was last verified')),
                ('biometric_data', models.JSONField(blank=True, help_text='Biometric verification data if applicable', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentExtraction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('extraction_type', models.CharField(choices=[('TEXT_OCR', 'Text OCR'), ('FACE_DETECTION', 'Face Detection'), ('MRZ_READING', 'MRZ Reading'), ('BARCODE_READING', 'Barcode Reading'), ('TABLE_EXTRACTION', 'Table Extraction')], max_length=50)),
                ('extracted_data', models.JSONField(help_text='Extracted information in structured format')),
                ('confidence_scores', models.JSONField(blank=True, help_text='Confidence scores for extracted fields', null=True)),
                ('extraction_method', models.CharField(choices=[('TESSERACT', 'Tesseract OCR'), ('AZURE_OCR', 'Azure OCR'), ('GOOGLE_VISION', 'Google Vision'), ('AWS_TEXTRACT', 'AWS Textract'), ('CUSTOM', 'Custom Extraction')], max_length=50)),
                ('processing_time', models.DurationField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extractions', to='document_verification.document')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'document extraction',
                'verbose_name_plural': 'document extractions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('document_type', models.CharField(choices=[('EMIRATES_ID', 'Emirates ID'), ('PASSPORT', 'Passport'), ('TRADE_LICENSE', 'Trade License'), ('VISA', 'Visa'), ('INCORPORATION_CERTIFICATE', 'Certificate of Incorporation'), ('MEMORANDUM_OF_ASSOCIATION', 'Memorandum of Association'), ('BOARD_RESOLUTION', 'Board Resolution'), ('POWER_OF_ATTORNEY', 'Power of Attorney'), ('OTHER', 'Other')], max_length=50)),
                ('issuing_country', models.CharField(max_length=100)),
                ('version', models.CharField(max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('template_regions', models.JSONField(help_text='Defined regions for data extraction')),
                ('validation_rules', models.JSONField(help_text='Rules for validating extracted data')),
                ('sample_images', models.JSONField(blank=True, help_text='Reference to sample document images', null=True)),
                ('preprocessing_steps', models.JSONField(blank=True, help_text='Image preprocessing steps', null=True)),
                ('extraction_settings', models.JSONField(help_text='Settings for data extraction')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'document template',
                'verbose_name_plural': 'document templates',
                'ordering': ['document_type', 'issuing_country'],
            },
        ),
        migrations.CreateModel(
            name='DocumentVerification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(max_length=50)),
                ('file_hash', models.CharField(max_length=64, unique=True)),
                ('action_at', models.DateTimeField(auto_now=True)),
                ('action_type', models.CharField(choices=[('CREATE', 'Created'), ('UPDATE', 'Updated'), ('DELETE', 'Deleted'), ('APPROVE', 'Approved'), ('REJECT', 'Rejected')], max_length=50)),
                ('ocr_data', models.JSONField(blank=True, help_text='Extracted text and field data from document', null=True)),
                ('ocr_confidence', models.FloatField(blank=True, help_text='OCR extraction confidence score', null=True)),
                ('ocr_status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('NEEDS_REVIEW', 'Needs Review')], default='PENDING', max_length=20)),
                ('facial_match_score', models.FloatField(blank=True, help_text='Face matching confidence score', null=True)),
                ('liveness_score', models.FloatField(blank=True, help_text='Liveness detection confidence score', null=True)),
                ('face_image', models.ImageField(blank=True, null=True, upload_to='face_images/%Y/%m/')),
                ('liveness_video', models.FileField(blank=True, null=True, upload_to='liveness_videos/%Y/%m/')),
                ('nfc_data', models.JSONField(blank=True, help_text='Data extracted from NFC chip', null=True)),
                ('nfc_verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('VERIFIED', 'Verified'), ('FAILED', 'Failed'), ('UNSUPPORTED', 'Unsupported'), ('ERROR', 'Error')], default='PENDING', max_length=20)),
                ('barcode_data', models.JSONField(blank=True, help_text='Data extracted from document barcode', null=True)),
                ('barcode_type', models.CharField(blank=True, choices=[('QR', 'QR Code'), ('PDF417', 'PDF417'), ('DATAMATRIX', 'Data Matrix'), ('OTHER', 'Other')], max_length=20, null=True)),
                ('action_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_actions', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_verifications', to='customer_management.customer')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'document verification',
                'verbose_name_plural': 'document verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveVerificationSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('session_type', models.CharField(choices=[('DOCUMENT', 'Document Verification'), ('FACIAL', 'Facial Verification'), ('LIVENESS', 'Liveness Check'), ('COMBINED', 'Combined Verification')], max_length=50)),
                ('session_token', models.CharField(max_length=100, unique=True)),
                ('session_status', models.CharField(choices=[('INITIATED', 'Initiated'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('EXPIRED', 'Expired'), ('FAILED', 'Failed')], default='INITIATED', max_length=20)),
                ('expiry_time', models.DateTimeField()),
                ('session_data', models.JSONField(blank=True, help_text='Session-specific data and parameters', null=True)),
                ('verification_attempts', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_verification_sessions', to='customer_management.customer')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'live verification session',
                'verbose_name_plural': 'live verification sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VerificationResult',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(choices=[('OCR', 'OCR Verification'), ('FACIAL', 'Facial Verification'), ('NFC', 'NFC Chip Verification'), ('BARCODE', 'Barcode Verification'), ('MANUAL', 'Manual Verification')], max_length=50)),
                ('verification_details', models.JSONField(help_text='Detailed verification results')),
                ('risk_flags', models.JSONField(blank=True, help_text='Potential risk flags identified', null=True)),
                ('reviewer_notes', models.TextField(blank=True)),
                ('review_date', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('document_verification', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification_result', to='document_verification.documentverification')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'verification result',
                'verbose_name_plural': 'verification results',
            },
        ),
        migrations.CreateModel(
            name='VerificationSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('session_type', models.CharField(choices=[('ONBOARDING', 'Initial Onboarding'), ('UPDATE', 'Information Update'), ('PERIODIC', 'Periodic Review'), ('ENHANCED', 'Enhanced Due Diligence')], max_length=50)),
                ('status', models.CharField(choices=[('INITIATED', 'Session Initiated'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('EXPIRED', 'Expired'), ('FAILED', 'Failed')], default='INITIATED', max_length=50)),
                ('session_data', models.JSONField(help_text='Session configuration and progress data')),
                ('expiry_time', models.DateTimeField()),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('biometric_verifications', models.ManyToManyField(related_name='sessions', to='document_verification.biometricverification')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_sessions', to='customer_management.customer')),
                ('document_verifications', models.ManyToManyField(related_name='sessions', to='document_verification.documentverification')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'verification session',
                'verbose_name_plural': 'verification sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='biometricverification',
            index=models.Index(fields=['customer', 'verification_type'], name='document_ve_custome_d601d4_idx'),
        ),
        migrations.AddIndex(
            model_name='biometricverification',
            index=models.Index(fields=['verification_status'], name='document_ve_verific_7bd390_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['document_type', 'document_number'], name='document_ve_documen_d5d7ae_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['verification_status'], name='document_ve_verific_9759a3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='document',
            unique_together={('document_type', 'document_number')},
        ),
        migrations.AddIndex(
            model_name='documentextraction',
            index=models.Index(fields=['document', 'extraction_type'], name='document_ve_documen_49c312_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttemplate',
            index=models.Index(fields=['document_type', 'issuing_country'], name='document_ve_documen_daa01c_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttemplate',
            index=models.Index(fields=['is_active'], name='document_ve_is_acti_830f1e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documenttemplate',
            unique_together={('document_type', 'issuing_country', 'version')},
        ),
        migrations.AddIndex(
            model_name='documentverification',
            index=models.Index(fields=['ocr_status'], name='document_ve_ocr_sta_90b3d0_idx'),
        ),
        migrations.AddIndex(
            model_name='documentverification',
            index=models.Index(fields=['nfc_verification_status'], name='document_ve_nfc_ver_6d1fe6_idx'),
        ),
        migrations.AddIndex(
            model_name='documentverification',
            index=models.Index(fields=['customer'], name='document_ve_custome_220516_idx'),
        ),
        migrations.AddIndex(
            model_name='liveverificationsession',
            index=models.Index(fields=['session_token'], name='document_ve_session_f73931_idx'),
        ),
        migrations.AddIndex(
            model_name='liveverificationsession',
            index=models.Index(fields=['session_status', 'expiry_time'], name='document_ve_session_39f3cd_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationresult',
            index=models.Index(fields=['is_verified', 'verification_method'], name='document_ve_is_veri_6635f4_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationresult',
            index=models.Index(fields=['review_date'], name='document_ve_review__f31ed2_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationsession',
            index=models.Index(fields=['session_id'], name='document_ve_session_42653d_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationsession',
            index=models.Index(fields=['customer', 'session_type'], name='document_ve_custome_bd3929_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationsession',
            index=models.Index(fields=['status', 'expiry_time'], name='document_ve_status_bb0cff_idx'),
        ),
    ]
