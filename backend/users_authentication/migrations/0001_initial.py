# Generated by Django 5.2.4 on 2025-07-07 06:22

import core.validators
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('compliance_officer', 'Compliance Officer'), ('customer_service', 'Customer Service'), ('risk_analyst', 'Risk Analyst'), ('auditor', 'Auditor')], default='customer_service', max_length=50)),
                ('phone_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Phone number must be a valid UAE number starting with +971', regex='^\\+971\\d{9}$')])),
                ('department', models.CharField(blank=True, max_length=100)),
                ('emirates_id', models.CharField(blank=True, max_length=18, null=True, unique=True, validators=[core.validators.validate_emirates_id])),
                ('is_verified_uae_pass', models.BooleanField(default=False)),
                ('uae_pass_last_login', models.DateTimeField(blank=True, null=True)),
                ('uae_pass_user_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('mfa_enabled', models.BooleanField(default=False)),
                ('mfa_method', models.CharField(choices=[('none', 'None'), ('totp', 'Time-based OTP'), ('sms', 'SMS'), ('email', 'Email'), ('backup_codes', 'Backup Codes')], default='none', max_length=20)),
                ('mfa_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('mfa_backup_codes', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_login_device', models.CharField(blank=True, max_length=255)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('password_changed_at', models.DateTimeField(blank=True, null=True)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('ar', 'Arabic')], default='en', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='MFADevice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('device_type', models.CharField(choices=[('AUTHENTICATOR', 'Authenticator App'), ('SMS', 'SMS'), ('EMAIL', 'Email'), ('BIOMETRIC', 'Biometric')], max_length=20)),
                ('identifier', models.CharField(help_text='Phone number, email, or device identifier', max_length=255)),
                ('secret_key', models.CharField(blank=True, help_text='Secret key for authenticator apps', max_length=255)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mfa_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MFA device',
                'verbose_name_plural': 'MFA devices',
            },
        ),
        migrations.CreateModel(
            name='MFAVerification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('verification_type', models.CharField(choices=[('LOGIN', 'Login'), ('TRANSACTION', 'Transaction'), ('PASSWORD_RESET', 'Password Reset'), ('PROFILE_UPDATE', 'Profile Update')], max_length=50)),
                ('code_generated', models.CharField(max_length=20)),
                ('code_expiry', models.DateTimeField()),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to='users_authentication.mfadevice')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mfa_verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MFA verification',
                'verbose_name_plural': 'MFA verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UAEPassProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('uae_pass_id', models.CharField(db_index=True, help_text='Unique identifier from UAE PASS', max_length=100, unique=True, verbose_name='UAE PASS ID')),
                ('full_name_en', models.CharField(max_length=255, verbose_name='full name (English)')),
                ('full_name_ar', models.CharField(max_length=255, verbose_name='full name (Arabic)')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10, verbose_name='gender')),
                ('nationality', models.CharField(max_length=100, verbose_name='nationality')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('profile_data', models.JSONField(help_text='Additional profile data from UAE PASS', verbose_name='profile data')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='uae_pass_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'UAE PASS profile',
                'verbose_name_plural': 'UAE PASS profiles',
            },
        ),
        migrations.CreateModel(
            name='UAEPassToken',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('access_token', models.CharField(help_text='OAuth2 access token', max_length=255, verbose_name='access token')),
                ('refresh_token', models.CharField(help_text='OAuth2 refresh token', max_length=255, verbose_name='refresh token')),
                ('token_type', models.CharField(default='Bearer', max_length=50, verbose_name='token type')),
                ('expires_at', models.DateTimeField(help_text='Token expiration timestamp', verbose_name='expires at')),
                ('scope', models.CharField(help_text='OAuth2 scope', max_length=255, verbose_name='scope')),
                ('is_active', models.BooleanField(default=True, help_text='Token is active and valid', verbose_name='is active')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='uae_pass_token', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'UAE PASS token',
                'verbose_name_plural': 'UAE PASS tokens',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('activity_type', models.CharField(max_length=50)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('endpoint', models.CharField(max_length=255)),
                ('request_method', models.CharField(max_length=10)),
                ('request_body', models.JSONField(blank=True, null=True)),
                ('response_status', models.IntegerField()),
                ('error_message', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user activity',
                'verbose_name_plural': 'user activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('permission_name', models.CharField(max_length=255)),
                ('module_name', models.CharField(max_length=100)),
                ('can_create', models.BooleanField(default=False)),
                ('can_read', models.BooleanField(default=True)),
                ('can_update', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('restrictions', models.JSONField(blank=True, help_text='Additional restrictions or filters for this permission', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user permission',
                'verbose_name_plural': 'user permissions',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('session_id', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True, verbose_name='session ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP address')),
                ('user_agent', models.CharField(max_length=255, verbose_name='user agent')),
                ('device_info', models.JSONField(help_text='Device fingerprint and details', verbose_name='device info')),
                ('location_info', models.JSONField(blank=True, help_text='Geolocation data if available', null=True, verbose_name='location info')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('mfa_verified', models.BooleanField(default=False, verbose_name='MFA verified')),
                ('risk_score', models.FloatField(default=0.0, help_text='Session risk score (0-1)', verbose_name='risk score')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user session',
                'verbose_name_plural': 'user sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.AddIndex(
            model_name='mfadevice',
            index=models.Index(fields=['device_type', 'is_primary'], name='users_authe_device__0d2855_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mfadevice',
            unique_together={('user', 'device_type', 'identifier')},
        ),
        migrations.AddIndex(
            model_name='mfaverification',
            index=models.Index(fields=['user', '-created_at'], name='users_authe_user_id_6d2024_idx'),
        ),
        migrations.AddIndex(
            model_name='mfaverification',
            index=models.Index(fields=['code_expiry'], name='users_authe_code_ex_5c4c0f_idx'),
        ),
        migrations.AddIndex(
            model_name='uaepassprofile',
            index=models.Index(fields=['uae_pass_id'], name='users_authe_uae_pas_ca3177_idx'),
        ),
        migrations.AddIndex(
            model_name='uaepassprofile',
            index=models.Index(fields=['nationality'], name='users_authe_nationa_784de3_idx'),
        ),
        migrations.AddIndex(
            model_name='uaepasstoken',
            index=models.Index(fields=['is_active'], name='users_authe_is_acti_42ad36_idx'),
        ),
        migrations.AddIndex(
            model_name='uaepasstoken',
            index=models.Index(fields=['expires_at'], name='users_authe_expires_8aa240_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', '-created_at'], name='users_authe_user_id_94ea80_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type'], name='users_authe_activit_5a1b42_idx'),
        ),
        migrations.AddIndex(
            model_name='userpermission',
            index=models.Index(fields=['user', 'module_name'], name='users_authe_user_id_4ca074_idx'),
        ),
        migrations.AddIndex(
            model_name='userpermission',
            index=models.Index(fields=['permission_name'], name='users_authe_permiss_bec45c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userpermission',
            unique_together={('user', 'permission_name', 'module_name')},
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_id'], name='users_authe_session_de9918_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='users_authe_user_id_23ac47_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['last_activity'], name='users_authe_last_ac_b96a3a_idx'),
        ),
    ]
