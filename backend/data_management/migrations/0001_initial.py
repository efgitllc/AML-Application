# Generated by Django 5.2.4 on 2025-07-07 10:40

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataRepository',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('repository_type', models.CharField(choices=[('DOCUMENT', 'Document Repository'), ('TRANSACTION', 'Transaction Data'), ('CUSTOMER', 'Customer Data'), ('AUDIT', 'Audit Data'), ('ARCHIVE', 'Archive'), ('OTHER', 'Other')], max_length=50)),
                ('description', models.TextField()),
                ('storage_location', models.CharField(max_length=255)),
                ('storage_type', models.CharField(choices=[('LOCAL', 'Local Storage'), ('S3', 'Amazon S3'), ('AZURE_BLOB', 'Azure Blob Storage'), ('GCS', 'Google Cloud Storage'), ('OTHER', 'Other')], max_length=50)),
                ('storage_config', models.JSONField(help_text='Storage configuration details')),
                ('retention_policy', models.JSONField(help_text='Data retention policy configuration')),
                ('access_policy', models.JSONField(help_text='Access control policy')),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'data repository',
                'verbose_name_plural': 'data repositories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataImport',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('import_id', models.CharField(max_length=100, unique=True)),
                ('import_type', models.CharField(choices=[('BULK', 'Bulk Import'), ('INCREMENTAL', 'Incremental Import'), ('MIGRATION', 'Data Migration'), ('SYNC', 'Data Synchronization'), ('OTHER', 'Other')], max_length=50)),
                ('source_system', models.CharField(max_length=100)),
                ('source_format', models.CharField(choices=[('CSV', 'CSV'), ('JSON', 'JSON'), ('XML', 'XML'), ('SQL', 'SQL'), ('OTHER', 'Other')], max_length=20)),
                ('file_path', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('VALIDATED', 'Validated'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('total_records', models.IntegerField(default=0)),
                ('processed_records', models.IntegerField(default=0)),
                ('failed_records', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_log', models.JSONField(blank=True, help_text='Details of any errors encountered', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imports', to='data_management.datarepository')),
            ],
            options={
                'verbose_name': 'data import',
                'verbose_name_plural': 'data imports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('export_id', models.CharField(max_length=100, unique=True)),
                ('export_type', models.CharField(choices=[('FULL', 'Full Export'), ('PARTIAL', 'Partial Export'), ('REPORT', 'Report Export'), ('ARCHIVE', 'Archive Export'), ('OTHER', 'Other')], max_length=50)),
                ('target_format', models.CharField(choices=[('CSV', 'CSV'), ('JSON', 'JSON'), ('XML', 'XML'), ('PDF', 'PDF'), ('OTHER', 'Other')], max_length=20)),
                ('filter_criteria', models.JSONField(blank=True, help_text='Export filter criteria', null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('file_path', models.CharField(blank=True, max_length=255)),
                ('total_records', models.IntegerField(default=0)),
                ('exported_records', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_log', models.JSONField(blank=True, help_text='Details of any errors encountered', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exports', to='data_management.datarepository')),
            ],
            options={
                'verbose_name': 'data export',
                'verbose_name_plural': 'data exports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataArchive',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('hash', models.CharField(blank=True, help_text='SHA-256 hash of critical fields', max_length=64)),
                ('archive_id', models.CharField(max_length=100, unique=True)),
                ('archive_type', models.CharField(choices=[('PERIODIC', 'Periodic Archive'), ('RETENTION', 'Retention Archive'), ('COMPLIANCE', 'Compliance Archive'), ('MANUAL', 'Manual Archive'), ('OTHER', 'Other')], max_length=50)),
                ('data_type', models.CharField(max_length=50)),
                ('date_range', models.JSONField(help_text='Date range of archived data')),
                ('storage_location', models.CharField(max_length=255)),
                ('compression_type', models.CharField(choices=[('ZIP', 'ZIP'), ('GZIP', 'GZIP'), ('TAR', 'TAR'), ('NONE', 'None')], default='ZIP', max_length=20)),
                ('size_bytes', models.BigIntegerField()),
                ('record_count', models.IntegerField()),
                ('is_encrypted', models.BooleanField(default=True)),
                ('encryption_details', models.JSONField(blank=True, help_text='Encryption configuration details', null=True)),
                ('retention_period', models.DurationField()),
                ('expiry_date', models.DateTimeField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archives', to='data_management.datarepository')),
            ],
            options={
                'verbose_name': 'data archive',
                'verbose_name_plural': 'data archives',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='datarepository',
            index=models.Index(fields=['repository_type', 'is_active'], name='data_manage_reposit_28fba5_idx'),
        ),
        migrations.AddIndex(
            model_name='datarepository',
            index=models.Index(fields=['storage_type'], name='data_manage_storage_25d43c_idx'),
        ),
        migrations.AddIndex(
            model_name='dataimport',
            index=models.Index(fields=['repository', 'import_type'], name='data_manage_reposit_02ee06_idx'),
        ),
        migrations.AddIndex(
            model_name='dataimport',
            index=models.Index(fields=['status', 'import_id'], name='data_manage_status_a2bee8_idx'),
        ),
        migrations.AddIndex(
            model_name='dataexport',
            index=models.Index(fields=['repository', 'export_type'], name='data_manage_reposit_4da952_idx'),
        ),
        migrations.AddIndex(
            model_name='dataexport',
            index=models.Index(fields=['status', 'export_id'], name='data_manage_status_e9b39c_idx'),
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['repository', 'archive_type'], name='data_manage_reposit_4dbd54_idx'),
        ),
        migrations.AddIndex(
            model_name='dataarchive',
            index=models.Index(fields=['archive_id', 'expiry_date'], name='data_manage_archive_6bce67_idx'),
        ),
    ]
